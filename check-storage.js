import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function checkStorage() {
  try {
    console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º Supabase Storage...\n');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ buckets
    const { data: buckets, error } = await supabase.storage.listBuckets();

    if (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ buckets:', error);
      return;
    }

    console.log('–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ buckets:');
    buckets.forEach(bucket => {
      console.log(`- ${bucket.name} (${bucket.public ? '–ø—É–±–ª–∏—á–Ω—ã–π' : '–ø—Ä–∏–≤–∞—Ç–Ω—ã–π'})`);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—à bucket
    const productsBucket = buckets.find(b => b.name === 'products');

    if (productsBucket) {
      console.log('\n‚úÖ Bucket "products" —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
      console.log('   –ü—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø:', productsBucket.public ? '–î–∞' : '–ù–µ—Ç');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –≤ bucket
      const { data: files, error: filesError } = await supabase.storage
        .from('products')
        .list();

      if (!filesError) {
        console.log('   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤:', files?.length || 0);
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
      const testUrl = supabase.storage
        .from('products')
        .getPublicUrl('test-image.jpg');

      console.log('\nüì∏ –ü—Ä–∏–º–µ—Ä –ø—É–±–ª–∏—á–Ω–æ–≥–æ URL –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:');
      console.log('   ', testUrl.data.publicUrl);

    } else {
      console.log('\n‚ùå Bucket "products" –ù–ï –Ω–∞–π–¥–µ–Ω!');
      console.log('   –ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ —á–µ—Ä–µ–∑ setup-storage.js');
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error);
  }
}

checkStorage();